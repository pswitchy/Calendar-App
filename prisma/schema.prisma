generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  password        Password?
  role            String?          @default("user")
  pushSubscription String?
  preferences     UserPreferences?
  events          Event[]
  activities      UserActivity[]
  notifications   Notification[]
  eventAttendees  EventAttendee[]
  accounts        Account[]
  sessions        Session[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdBy       String          @default("parthsharma-git")
  updatedBy       String?
  profile         UserProfile?
  
  status         UserStatus     @default(ACTIVE)
  lastLogin      DateTime?
  failedAttempts Int           @default(0)
  lockoutUntil   DateTime?
  
  @@index([email])
  @@index([status])
}

model Password {
  id         String   @id @default(cuid())
  hash       String
  salt       String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  String   @default("parthsharma-git")
  updatedBy  String?
}

model UserPreferences {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String    @unique
  theme         String    @default("system")
  notifications Boolean   @default(true)
  weekStartsOn  Int       @default(1)
  timezone      String    @default("UTC")
  language      String    @default("en")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String    @default("parthsharma-git")
  updatedBy     String?

  @@index([userId])
}

model Event {
  id                   String         @id @default(cuid())
  title               String
  description         String?
  startTime           DateTime
  endTime             DateTime
  location            String?
  isAllDay            Boolean         @default(false)
  color               String?
  category            String?
  googleCalendarEventId String?       @unique
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  activities          UserActivity[]
  notifications       Notification[]
  attendees           EventAttendee[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  createdBy           String         @default("parthsharma-git")
  updatedBy           String?

  @@index([userId])
  @@index([startTime])
  @@index([endTime])
  @@index([category])
  @@index([googleCalendarEventId])
}

model UserActivity {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      String
  details   String
  event     Event?   @relation(fields: [eventId], references: [id])
  eventId   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  createdBy String   @default("parthsharma-git")

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  event     Event?   @relation(fields: [eventId], references: [id])
  eventId   String?
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  readAt    DateTime?
  createdBy String   @default("parthsharma-git")
  updatedBy String?

  @@index([userId])
  @@index([eventId])
  @@index([read])
  @@index([createdAt])
}

model EventAttendee {
  id          String         @id @default(cuid())
  event       Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  email       String
  status      AttendeeStatus @default(PENDING)
  role        AttendeeRole   @default(REQUIRED)
  response    String?        // Optional response message
  notifyBefore Int?         // Minutes before event to send notification
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  createdBy   String         @default("parthsharma-git")
  updatedBy   String?

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
  @@index([status])
  @@index([role])
  @@index([createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AuthLog {
  id          String   @id @default(cuid())
  success     Boolean
  providerId  String
  ipAddress   String
  userAgent   String
  timestamp   DateTime
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([timestamp])
  @@index([providerId])
}

// Enum definitions
enum ActivityType {
  SIGN_IN
  SIGN_OUT
  CREATE_EVENT
  UPDATE_EVENT
  DELETE_EVENT
  VIEW_EVENT
  LIST_EVENTS
  SEARCH_EVENTS
  UPDATE_PROFILE
  UPDATE_PREFERENCES
  CALENDAR_SYNC
  VIEW_STATS
  PUSH_SUBSCRIPTION
  NOTIFICATION_SENT
}

enum AttendeeStatus {
  PENDING
  ACCEPTED
  DECLINED
  TENTATIVE
}

enum AttendeeRole {
  ORGANIZER
  REQUIRED
  OPTIONAL
  OWNER
  ATTENDEE
  GUEST
}

enum Theme {
  light
  dark
  system
}

enum Role {
  user
  admin
  moderator
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}


enum TimeZonePreference {
  LOCAL
  UTC
  CUSTOM
}

enum CalendarView {
  MONTH
  WEEK
  DAY
  AGENDA
}


model UserProfile {
  id                String             @id @default(cuid())
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String             @unique
  
  // Personal Information
  displayName       String?
  title            String?
  bio              String?            @db.Text
  phoneNumber      String?
  location         String?
  
  // Preferences
  theme            Theme             
  language         String            @default("en")
  timeZone         String            @default("UTC")
  timeZonePreference TimeZonePreference @default(LOCAL)
  defaultView      CalendarView      @default(MONTH)
  
  // Calendar Settings
  workingHours     Json?             // Store working hours for each day
  weekStartsOn     Int               @default(0) // 0 = Sunday, 1 = Monday
  defaultEventDuration Int           @default(60) // in minutes
  showWeekends     Boolean           @default(true)
  showDeclinedEvents Boolean         @default(false)
  
  // Notification Preferences
  emailNotifications Boolean         @default(true)
  pushNotifications Boolean         @default(true)
  reminderDefault   Int?             // minutes before event
  
  // Status and Metadata
  status           UserStatus        @default(ACTIVE)
  lastActive       DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  createdBy        String            @default("parthsharma-git")
  updatedBy        String?

  // Custom Calendar Integration Settings
  calendarIntegrations Json?        // Store external calendar integration preferences
  
  // Analytics and Usage
  loginCount       Int               @default(0)
  eventsCreated    Int               @default(0)
  totalEventHours  Float             @default(0)

  @@index([userId])
  @@index([status])
  @@index([lastActive])
  @@map("user_profiles")
}